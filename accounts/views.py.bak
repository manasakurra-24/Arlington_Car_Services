from django.contrib import messages, auth
from django.http import HttpResponseRedirect
from django.shortcuts import render, redirect
from django.views.generic import CreateView, FormView, RedirectView
from accounts.forms import *
from accounts.models import User
import pyrebase
import os
from django.views.generic import TemplateView

config = {
    "apiKey": "AIzaSyAPurpHf0cbK1U684_Q67QHsn2f5U2Y6og",
    "authDomain": "chatbot-b7646.firebaseapp.com",
    "projectId": "chatbot-b7646",
    "storageBucket": "chatbot-b7646.appspot.com",
    "messagingSenderId": "344015977001",
    "appId": "1:344015977001:web:4af07bf5fa1cf542773a38",
    "measurementId": "G-31VCTRHECD",
    "databaseURL":"https://console.firebase.google.com/project/chatbot-b7646/firestore/data/~2F"
  }
firebase = pyrebase.initialize_app(config)
storage = firebase.storage()

class RegisterView(CreateView):
    """
        Provides the ability to register as a Patient.
    """
    model = User
    form_class = RegistrationForm
    template_name = 'accounts/register.html'
    success_url = '/'

    extra_context = {
        'title': 'Register'
    }

    def dispatch(self, request, *args, **kwargs):
        if self.request.user.is_authenticated:
            return HttpResponseRedirect(self.get_success_url())
        return super().dispatch(self.request, *args, **kwargs)

    def post(self, request, *args, **kwargs):

        form = self.form_class(data=request.POST)

        if form.is_valid():
            user = form.save(commit=False)
            password = form.cleaned_data.get("password1")
            user.set_password(password)
            user.save()
            return redirect('accounts:login')
        else:
            return render(request, 'accounts/register.html', {'form': form})



class LoginView(FormView):
    """
        Provides the ability to login as a user with an email and password
    """
    success_url = '/'
    form_class = LoginForm
    template_name = 'accounts/login.html'

    extra_context = {
        'title': 'Login'
    }

    def dispatch(self, request, *args, **kwargs):
        if self.request.user.is_authenticated:
            return HttpResponseRedirect(self.get_success_url())
        return super().dispatch(self.request, *args, **kwargs)

    def get_success_url(self):
        if 'next' in self.request.GET and self.request.GET['next'] != '':
            return self.request.GET['next']
        else:
            return self.success_url

    def get_form_class(self):
        return self.form_class

    def form_valid(self, form):
        auth.login(self.request, form.get_user())
        return HttpResponseRedirect(self.get_success_url())

    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        return self.render_to_response(self.get_context_data(form=form))


class LogoutView(RedirectView):
    """
        Provides users the ability to logout
    """
    url = '/'

    def get(self, request, *args, **kwargs):
        auth.logout(request)
        messages.success(request, 'You are now logged out')
        return super(LogoutView, self).get(request, *args, **kwargs)
        
class AboutView(TemplateView):
    template_name = "About.html"


def dash(request):
    return render(request, 'home.html')
def chat(request):
    return render(request, 'home1.html')